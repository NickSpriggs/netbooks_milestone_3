Check results
=============



Code
=============
import os
from flask import (
    Flask, render_template,
    redirect, request, session, url_for)
from flask_pymongo import PyMongo
from werkzeug.security import generate_password_hash, check_password_hash
import datetime
if os.path.exists("env.py"):
    import env


app = Flask(__name__)

app.config["MONGO_DBNAME"] = os.environ.get("MONGO_DBNAME")
app.config["MONGO_URI"] = os.environ.get("MONGO_URI")
app.secret_key = os.environ.get("SECRET_KEY")

mongo = PyMongo(app)
# This is the instance of our Flask app using pyMongo

# Global variables are for UX to track users' most recent searches
searching = False
searchQuery = ""


@app.route("/")
def index():
    """
    This will create the basic landing page. Along with presenting
    the most recent films edited in the database it will also
    provide the user with a brief overview of the sites function.
    """

    films = mongo.db.film_list.find().sort("date", -1)
    return render_template(
        "get_films.html", films=films, intro=True)


@app.route("/get_films")
def get_films():
    """
    This will produce all the films in the database in the order of most
    recently added.
    """

    global searching
    searching = False

    films = mongo.db.film_list.find().sort("date", -1)
    return render_template("get_films.html", films=films)


@app.route("/get_film/<film_title>")
def get_film(film_title):
    """
    This will return the home page with the selected film profile's
    overlay active. Additionally, it needs all the book recommendations
    for the relevant film.
    """

    global searching
    global searchQuery

    films = mongo.db.film_list.find().sort("date", -1)
    film = mongo.db.film_list.find_one({"title": film_title})
    recs = mongo.db.rec_list.find().sort("date", -1)

    if searching:
        films = list(mongo.db.film_list.find({"$text": {
            "$search": searchQuery}}))
        return render_template(
            "get_films.html", film=film, films=films, recs=recs,
            search=searching, searchQuery=searchQuery, overlay_profile=True)

    return render_template(
        "get_films.html", film=film, films=films, recs=recs, search=searching,
        searchQuery=searchQuery, overlay_profile=True)


@app.route("/search", methods=["GET", "POST"])
def search():
    """
    This searches the database for whatever term the user input and returns
    all the films that meet the query's specifications.
    """
    global searching
    global searchQuery

    if request.method == "POST":
        query = request.form.get("query")
        searching = True
        searchQuery = query

        films = list(mongo.db.film_list.find({"$text": {"$search": query}}))
        return render_template(
            "get_films.html", films=films, search=searching,
            searchQuery=searchQuery)

    return get_films()


@app.route("/genre_search/<genre>")
def genre_search(genre):
    """
    This search function query's the database by film genre. I'm
    still having trouble getting it to focus on just the genre text
    in the film DB so at the moment both search() and genre_search()
    query a shared text index made of both film titles and genres.
    """
    global searching
    global searchQuery

    searching = True
    searchQuery = genre

    films = list(mongo.db.film_list.find({"$text": {"$search": genre}}))
    return render_template(
        "get_films.html", films=films, search=searching,
        searchQuery=searchQuery)


@app.route("/add_film", methods=["GET", "POST"])
def add_film():
    """
    This function takes the POSTed information from the user, identifies if
    the film already exists in the database and, if not, adds the film to the
    database and returns the get_film() page for the new film so the user
    might add books to it's profile.
    """
    if request.method == "POST":
        # Check if film already exists
        exists = mongo.db.film_list.find_one({
            "title": request.form.get("title")
            })
        if exists:
            return get_films()

        film = {
            "title": request.form.get("title"),
            "genre": request.form.get("genre"),
            "poster_url": request.form.get("user_poster_url"),
            "creator": session["user"],
            "date": datetime.datetime.now(),
        }
        title = request.form.get("title")
        mongo.db.film_list.insert_one(film)
        return redirect(url_for("get_film", film_title=title))

    # Won't be called. Only POST.
    return get_films()


@app.route("/edit_film/<film_title>", methods=["GET", "POST"])
def edit_film(film_title):
    """
    Similar to add_film this function checks if the film input already exists
    in the database before allowing the user to make updates to it. However,
    this one also checks if the user is either the film's creator or admin
    before allowing them to perform any updates.
    """
    global searching
    global searchQuery
    film = mongo.db.film_list.find_one({"title": film_title})
    films = mongo.db.film_list.find().sort("date", -1)
    recs = mongo.db.rec_list.find().sort("date", -1)

    # Check if a user is logged in
    if not session:
        return get_film(film_title)

    if request.method == "POST":
        # Check if film already exists
        exists = mongo.db.film_list.find_one({
            "title": request.form.get("title"),
            "genre": request.form.get("genre"),
            "poster_url": request.form.get("user_poster_url")
            })
        if exists:
            return get_film(film_title)

        # Find if the user created it...
        user_filter = mongo.db.film_list.find_one({
            "title": film_title,
            "creator": session["user"]
        })

        # If user didn't create it and user is not admin: get_films()
        if not user_filter and session["user"].lower() != "admin":
            return get_film(film_title)

        filter = {"title": film_title}

        # New values for film
        submit = {"$set": {
            "title": request.form.get("title"),
            "genre": request.form.get("genre"),
            "poster_url": request.form.get("user_poster_url"),
            "creator": session["user"],
            "date": datetime.datetime.now(),
        }}

        newTitle = request.form.get("title")
        mongo.db.film_list.update(filter, submit)
        mongo.db.rec_list.update_many(filter, {"$set": {
            "title": newTitle}})
        return get_film(newTitle)

    if searching:
        films = list(mongo.db.film_list.find({"$text": {
            "$search": searchQuery}}))

    return render_template(
        "get_films.html", film=film, films=films, recs=recs, overlay_edit=True,
        overlay_profile=True, search=searching, searchQuery=searchQuery)


@app.route("/delete_film/<film_title>")
def delete_film(film_title):
    """
    Finds the input film in the film database, as well as all
    recommendations related to it in the recommendation database.
    The function then deletes them if the user is the admin or the
    film profile's creator.
    """
    global searching
    global searchQuery

    # Check if a user is logged in
    if not session:
        return get_film(film_title)

    # Find if the user created it...
    user_filter = mongo.db.film_list.find_one({
        "title": film_title,
        "creator": session["user"]
    })

    if not user_filter and session["user"].lower() != "admin":
        return get_film(film_title)

    mongo.db.film_list.remove({
        "title": film_title})
    mongo.db.rec_list.remove({
        "title": film_title})

    films = mongo.db.film_list.find().sort("date", -1)
    recs = mongo.db.rec_list.find().sort("date", -1)

    if searching:
        films = list(mongo.db.film_list.find({"$text": {
            "$search": searchQuery}}))

    return render_template(
        "get_films.html", films=films, search=searching,
        searchQuery=searchQuery, recs=recs)


@app.route("/add_rec", methods=["GET", "POST"])
def add_rec():
    """
    Similiar to add_film() this function identifies if the recommendation
    already exists in the database and, if not, creates it and returns the
    get_film() page with the new recommendation as the first in the list.
    """
    if request.method == "POST":
        # Check if film recommendation already exists
        exists = mongo.db.rec_list.find_one({
            "title": request.form.get("title"),
            "book": request.form.get("book")
            })
        if exists:
            return get_film(request.form.get("title"))

        rec = {
            "title": request.form.get("title"),
            "book": request.form.get("book"),
            "author": request.form.get("author"),
            "creator": session["user"],
            "date": datetime.datetime.now(),
        }

        mongo.db.rec_list.insert_one(rec)
        return get_film(request.form.get("title"))

    # Won't be called. Only POST.
    return get_films()


@app.route("/edit_rec/<film_title>/<book>", methods=["GET", "POST"])
def edit_rec(film_title, book):
    """
    Like edit_film this function also checks if the user is either the
    recommendation's creator or admin before allowing them to perform any
    updates on the recommendation database.
    """
    global searching
    global searchQuery

    film = mongo.db.film_list.find_one({"title": film_title})
    films = mongo.db.film_list.find().sort("date", -1)
    recs = mongo.db.rec_list.find().sort("date", -1)
    editedRec = mongo.db.rec_list.find_one({"book": book, "title": film_title})

    # Check if a user is logged in
    if not session:
        return get_film(film_title)

    if request.method == "POST":
        # Check if edited film recommendation already exists
        exists = mongo.db.rec_list.find_one({
            "title": request.form.get("title"),
            "book": request.form.get("book"),
            "author": request.form.get("author")
        })
        if exists:
            return get_film(request.form.get("title"))

        # Find recommendation only if the user created it...
        filter = {
            "book": book,
            "title": film_title,
            "creator": session["user"]
        }

        # ...or if user is admin.
        if session["user"].lower() == "admin":
            filter = {
                "book": book,
                "title": film_title,
            }

        # New values for recommendation
        newvalues = {"$set": {
            "title": request.form.get("title"),
            "book": request.form.get("book"),
            "author": request.form.get("author"),
            "creator": session["user"],
            "date": datetime.datetime.now()
        }}
        mongo.db.rec_list.update_one(filter, newvalues)
        return get_film(request.form.get("title"))

    if searching:
        films = list(mongo.db.film_list.find({"$text": {
            "$search": searchQuery}}))

    return render_template(
        "get_films.html", film=film, films=films, recs=recs,
        editedRec=editedRec, overlay_profile=True,
        overlay_edit_rec=True, search=searching, searchQuery=searchQuery)


@app.route("/delete_rec/<film_title>/<book>")
def delete_rec(film_title, book):
    """
    Finds the input recommendation in the corresponding database
    and makes sure it's specifically the one related to the film
    in question. Like delete_film() The function then deletes it
    if the user is the admin or the recommendation's creator.
    """
    # Check if a user is logged in
    if not session:
        return get_film(film_title)

    # Find if the user created it...
    user_filter = mongo.db.rec_list.find_one({
        "book": book,
        "title": film_title,
        "creator": session["user"].lower()
    })

    if not user_filter and session["user"].lower() != "admin":
        return get_film(film_title)

    mongo.db.rec_list.remove({
        "book": book,
        "title": film_title})

    return get_film(film_title)


@app.route("/register", methods=["GET", "POST"])
def register():
    """
    Creates user account in the user database
    as long as username isn't already taken. Once
    finishes it logins in the user and directs them
    to the get_films() page. If the user fails it
    returns them to the register screen and alerts them
    of the issue.
    """
    if request.method == "POST":
        # check if username from form already exists in database
        existing_user = mongo.db.readflix_users.find_one(
            {"username": request.form.get("username").lower()})

        if existing_user:
            return render_template("register.html", fail=True)

        register = {
            "username": request.form.get("username").lower(),
            "password": generate_password_hash(request.form.get("password"))
        }
        mongo.db.readflix_users.insert_one(register)

        # put the new user into 'session' cookie
        session["user"] = request.form.get("username").lower()
        return redirect(url_for("get_films"))
    return render_template("register.html")


@app.route('/login', methods=["GET", "POST"])
def login():
    """
    Creates a session for the user if the
    information they posted corresponds to
    that of a user in the user database. If not
    it redirects them to the login page with
    an error message.
    """
    if request.method == "POST":
        # check if username input in login.html exists in db
        existing_user = mongo.db.readflix_users.find_one(
            {"username": request.form.get("username").lower()})

        if existing_user:
            # if existing_user (the username) exists in database

            # ensure hashed password matches user input
            if check_password_hash(
                    existing_user["password"], request.form.get("password")):
                session["user"] = request.form.get("username").lower()
                return redirect(url_for("get_films"))
            else:
                # invalid password match
                return render_template("login.html", fail=True)

        else:
            # if existing_user, the username, doesn't exist
            return render_template("login.html", fail=True)

    # else if method != POST just return login.html
    return render_template("login.html")


@app.route("/logout")
def logout():
    """
    Logs the user out by ending the session
    and returns them to the home page.
    """
    # returns user to get_films if not logged in
    if not session:
        return get_films()

    session.pop("user")
    return get_films()


if __name__ == "__main__":
    app.run(host=os.environ.get("IP"),
            port=int(os.environ.get("PORT")),
            debug=False)
